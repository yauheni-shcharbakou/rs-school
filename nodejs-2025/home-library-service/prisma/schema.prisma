// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid(4))
  login         String
  password      String
  version       Int           @default(1)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
}

model Artist {
  id            String        @id @default(uuid(4))
  name          String
  grammy        Boolean       @default(false)
  albums        Album[]
  tracks        Track[]
  favorites     Favorites?    @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  favoritesId   String?
}

model Album {
  id            String        @id @default(uuid(4))
  name          String
  year          Int
  artist        Artist?       @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId      String?
  tracks        Track[]
  favorites     Favorites?    @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  favoritesId   String?
}

model Track {
  id            String        @id @default(uuid(4))
  name          String
  duration      Float
  artist        Artist?       @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId      String?
  album         Album?        @relation(fields: [albumId], references: [id], onDelete: SetNull)
  albumId       String?
  favorites     Favorites?    @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  favoritesId   String?
}

model Favorites {
  id            String        @id @default(uuid(4))
  albums        Album[]
  artists       Artist[]
  tracks        Track[]
}
